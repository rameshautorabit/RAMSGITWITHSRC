<apex:page standardController="RH_Order__c" extensions="Order_BillingIntCtrlExt" readOnly="true">
    <apex:sectionHeader title="Billing Information for Order" subtitle="{!RH_Order__c.Name}"/>
    <apex:outputField value="{!RH_Order__c.Name}" rendered="false"/>
    
<head> 
    <apex:includescript value="https://code.jquery.com/jquery-1.11.3.min.js"/>
    <apex:includescript value="https://cdn.datatables.net/1.10.9/js/jquery.dataTables.min.js" />
    <apex:includescript value="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.min.js" />
    <apex:stylesheet value="https://cdn.datatables.net/1.10.9/css/jquery.dataTables.css" />
    <apex:includeScript value="/soap/ajax/26.0/connection.js"/>
    <apex:includeScript value="/support/console/26.0/integration.js"/>
    
    
    <script type="text/javascript">
    Visualforce.remoting.timeout = 120000; // Set timeout at page level
    // If the Billing UI is called from the Console then open a new subtab to display it underneath the main tab for the Order 
    
   function addLoadEvent(func){ 
            var oldonload = window.onload; 
            if (typeof window.onload != 'function') 
                { 
                    window.onload = func; 
                } 
            else
                { 
                    window.onload = function()  
                    { 
                        if (oldonload) 
                        { 
                            oldonload(); 
                        } 
                        func(); 
                    } 
                } 
            } 
        
    addLoadEvent(function(){ 
        openOrderLineHistorySubtab();
    });

    function openBillingSubtab() {
            //First find the ID of the primary tab to put the new subtab in
            sforce.console.getEnclosingPrimaryTabId(openSubtab);
    };

     var openSubtab = function openSubtab(result){
            var primaryTabId = result.id;
            sforce.console.setTabTitle('Billing Info');
     };    
   </script>
   
    <!-- Allow for right align of cells. Reference static resource called GraphicsPack which holds a bunch of icons for use in Salesforce -->
    <style media="all" type="text/css">
        .alignRight { text-align: right; }
    td.details-control {
        background: url("{!URLFOR($Resource.GraphicsPack,'16/famfamfam/silk/add.png')}") no-repeat center center;
        cursor: pointer;
    }
    tr.shown td.details-control {
        background: url("{!URLFOR($Resource.GraphicsPack,'16/famfamfam/silk/delete.png')}") no-repeat center center;
    }
    </style>
    
    <script type="text/javascript">
    
    var j$ = jQuery.noConflict();
    
    var prodDescs = [];
    var prodSKUTypes = [];
    var invoiceDetail = [];
    
    function loadingDetails(val) {
            if (val) { 
                j$('#loadingbillingdata').show();
                wait(true);
            } else {
                j$('#loadingbillingdata').hide();
                wait(false);
            }
        }

   function wait(val) {
            if (val) {
                j$('body').css('cursor', 'progress');
                j$(':button').attr('disabled', 'true');
            } else {
                j$('body').css('cursor', 'auto');
                j$(':button').removeAttr('disabled');                
            }
        }   

    </script>
        
    <script>  
    
     j$(window).load(function() {
       retrieveInvoiceData();
     });
    
    function retrieveInvoiceData(){
       Visualforce.remoting.Manager.invokeAction(
          '{!$RemoteAction.Order_BillingIntCtrlExt.getInvoiceData}',
          '{!RH_Order__c.Name}',
          processResult
       );
    }
    
    function processResult(result, event){
       if(event.type == 'exception'){
          alert(event.message); console.log(JSON.stringify(result));
       }else if(event.status){
          if(result != null){
             if(result.length == 0){
                loadingDetails(false);
                j$('#invoicetable').hide();
                j$('#errorMessage').html('<b>There is no invoice data for order #' + '{!RH_Order__c.Name}' + '</b>');
             }else{
                processData(result);             
             }
          }else{
             alert('There are no records in CW for this order number.');
          }
       }else{
          alert('Error');
       }
    }
    
    function processData(invoice){
                 
       var counter = 0;
       var i = 0;
       var j = 0;
       var k = 0;
       var totallines = 0;
       for(i=0; i<invoice.length; i++){
          for(j=0; j<invoice[i].invoiceLine.length; j++){
             //invoice[i]._props = {'prodDesc': prodDescs[totallines], 'prodSKUType': prodSKUTypes[totallines]}; 
             var skuType = '';
             var prodDesc = '';
             if(invoice[i].invoiceLine[j].skuProduct != undefined){
                if(invoice[i].invoiceLine[j].skuProduct.ECommerce_Display_Name__c != undefined){
                   prodDesc = invoice[i].invoiceLine[j].skuProduct.ECommerce_Display_Name__c;                
                }else{
                   prodDesc = invoice[i].invoiceLine[j].skuProduct.CW_Item_Description__c; 
                } 
             }
             if(invoice[i].invoiceLine[j].skuProduct != undefined){
                skuType = invoice[i].invoiceLine[j].skuProduct.SKU_Type__c
             }
             invoice[i]._props = {'prodDesc': prodDesc, 'prodSKUType': skuType}; 
             totallines++;
          }
       }       
       invoiceDetail = invoice;    
      
       var uniqueInvoiceHeaders = new Array();   
  
       // Add the first element of the records array to the uniqueInvoices array and format for display.                          
       uniqueInvoiceHeaders.push(invoice[0]);
       uniqueInvoiceHeaders[0].invoiceNumber = invoice[0].InvoiceNumber;                          
       uniqueInvoiceHeaders[0].formattedInvoiceMerchandiseAmount = '$' + (invoice[0].MerchandiseAmountIST).toFixed(2);                           
       uniqueInvoiceHeaders[0].formattedInvoiceFreightAmount = '$' + (invoice[0].FreightAmountIST).toFixed(2);
       uniqueInvoiceHeaders[0].formattedInvoiceHandlingAmount = '$' + (invoice[0].HandlingAmountIST).toFixed(2);
       uniqueInvoiceHeaders[0].formattedInvoiceAddtionalChargeAmount = '$' + (invoice[0].AdditionalChargeAmountIST).toFixed(2); 
       uniqueInvoiceHeaders[0].formattedInvoiceAddtionalFreightAmount = '$' + (invoice[0].AdditionalFreightAmountIST).toFixed(2);
       uniqueInvoiceHeaders[0].formattedInvoiceTaxAmount = '$' + (invoice[0].TaxAmountIST).toFixed(2);
       uniqueInvoiceHeaders[0].formattedInvoiceGSTAmount = '$' + (invoice[0].GSTAmountIST).toFixed(2);
       uniqueInvoiceHeaders[0].formattedInvoicePSTAmount = '$' + (invoice[0].PSTAmountIST).toFixed(2);
       uniqueInvoiceHeaders[0].formattedInvoiceTotal = '$' + ((invoice[0].MerchandiseAmountIST) + (invoice[0].FreightAmountIST) + (invoice[0].HandlingAmountIST) + (invoice[0].AdditionalChargeAmountIST) + (invoice[0].AdditionalFreightAmountIST) + (invoice[0].TaxAmountIST)).toFixed(2); 

       // For global search purposes adding data elements that appear on child rows to childData property
       // associated with parent row so we can find these using the search functionality.  
   
       uniqueInvoiceHeaders[0].childData = invoice[0]._props.prodDesc + invoice[0].invoiceLine[0].CreditCardNumber; 
       for (k=0; k<invoice[0].additionalCharge.length; k++){       
          uniqueInvoiceHeaders[0].childData += invoice[0].additionalCharge[k].ChargeCode + invoice[0].additionalCharge[k].ChargeDescription + invoice[0].additionalCharge[k].ChargeAmount;
       }
       
       // Compare Invoice Number subsequent record element against one previous added to uniqueInvoiceHeaders array.
       totallines = 0;
       for (var i=1; i<invoice.length; i++){ 
         for (var j=0; j<invoice[i].invoiceLine.length; j++){ 
         
             var prodDescSearch = '';
             if(invoice[i].invoiceLine[j].skuProduct != undefined){
                if(invoice[i].invoiceLine[j].skuProduct.ECommerce_Display_Name__c != undefined){
                   prodDescSearch = invoice[i].invoiceLine[j].skuProduct.ECommerce_Display_Name__c;                
                }else{
                   prodDescSearch = invoice[i].invoiceLine[j].skuProduct.CW_Item_Description__c; 
                }
             }
                                     
         if(invoice[i].InvoiceNumber != invoice[i-1].InvoiceNumber && j == 0){   
           // If the Invoice Number is different then add any child row data elements that we want searchable to the 
           // childData property then add this as a new uniqueInvoiceHeaders element.
           uniqueInvoiceHeaders[++counter] = invoice[i];
           var cardChargeTotal = (invoice[i].invoiceLine[j].PaymentMerchandiseAmount).toFixed(2) + (invoice[i].invoiceLine[j].PaymentHandlingAmount).toFixed(2) + (invoice[i].invoiceLine[j].PaymentFreightAmount).toFixed(2) + (invoice[i].invoiceLine[j].PaymentAdditionalChargeAmount).toFixed(2) + (invoice[i].invoiceLine[j].PaymentAdditionalFreightAmount).toFixed(2);            
           uniqueInvoiceHeaders[counter].childData = prodDescSearch + invoice[i].invoiceLine[j].CreditCardNumber;                    
         }else{
              // If the Invoice number is the same don't include this record in the uniqueInvoiceHeaders array but do add any child row data elements 
              // that we want searchable to the childData property of the previous entry which has the same Invoice Number.
              uniqueInvoiceHeaders[counter].childData += prodDescSearch + invoice[i].invoiceLine[j].CreditCardNumber + (invoice[i].invoiceLine[j].PaymentMerchandiseAmount + invoice[i].invoiceLine[j].PaymentHandlingAmount + invoice[i].invoiceLine[j].PaymentFreightAmount + invoice[i].invoiceLine[j].PaymentAdditionalChargeAmount + invoice[i].invoiceLine[j].PaymentAdditionalFreightAmount);
         }
         totallines++;
       }
       for (k=0; k<invoice[i].additionalCharge.length; k++){       
          uniqueInvoiceHeaders[counter].childData += invoice[i].additionalCharge[k].ChargeCode + invoice[i].additionalCharge[k].ChargeDescription + invoice[i].additionalCharge[k].ChargeAmount;
       }
     }
     // Format the relevant properties of the remaining elements of the uniqueInvoiceHeaders array.
     for (var n=1; n<uniqueInvoiceHeaders.length; n++){   
             uniqueInvoiceHeaders[n].invoiceNumber = invoice[n].InvoiceNumber;    
             uniqueInvoiceHeaders[n].formattedInvoiceMerchandiseAmount = '$' + (uniqueInvoiceHeaders[n].MerchandiseAmountIST).toFixed(2);                             
             uniqueInvoiceHeaders[n].formattedInvoiceFreightAmount = '$' + (uniqueInvoiceHeaders[n].FreightAmountIST).toFixed(2);
             uniqueInvoiceHeaders[n].formattedInvoiceHandlingAmount = '$' + (uniqueInvoiceHeaders[n].HandlingAmountIST).toFixed(2);
             uniqueInvoiceHeaders[n].formattedInvoiceAddtionalChargeAmount = '$' + (uniqueInvoiceHeaders[n].AdditionalChargeAmountIST).toFixed(2); 
             uniqueInvoiceHeaders[n].formattedInvoiceAddtionalFreightAmount = '$' + (uniqueInvoiceHeaders[n].AdditionalFreightAmountIST).toFixed(2);
             uniqueInvoiceHeaders[n].formattedInvoiceTaxAmount = '$' + (uniqueInvoiceHeaders[n].TaxAmountIST).toFixed(2);
             uniqueInvoiceHeaders[n].formattedInvoiceGSTAmount = '$' + (uniqueInvoiceHeaders[n].GSTAmountIST).toFixed(2);
             uniqueInvoiceHeaders[n].formattedInvoicePSTAmount = '$' + (uniqueInvoiceHeaders[n].PSTAmountIST).toFixed(2);
             uniqueInvoiceHeaders[n].formattedInvoiceTotal = '$' + ((uniqueInvoiceHeaders[n].MerchandiseAmountIST) + (uniqueInvoiceHeaders[n].FreightAmountIST) + (uniqueInvoiceHeaders[n].HandlingAmountIST) + (uniqueInvoiceHeaders[n].AdditionalChargeAmountIST) + (uniqueInvoiceHeaders[n].AdditionalFreightAmountIST) + (uniqueInvoiceHeaders[n].TaxAmountIST)).toFixed(2);
     }                                    
    
       var invoiceTable = j$('[id$="invoicetable"]').DataTable({
                data: uniqueInvoiceHeaders,
                language: {
                "loadingRecords": "",
                "emptyTable": "No data available"
                 },
                 // Specify our columns. The first column is used to control expanding and collapsing.
                columns: [
                    { "class": 'details-control',
                        "orderable": false,
                        "data": null,
                        "defaultContent": '',
                        width: "8%",
                        },                  
                        
                    {"data": "InvoiceDate",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "invoiceNumber",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceMerchandiseAmount",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceHandlingAmount",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceFreightAmount",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceAddtionalChargeAmount",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceAddtionalFreightAmount",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceTaxAmount",
                        "defaultContent": '' },
                    {sClass: "alignRight", "data": "formattedInvoiceGSTAmount",
                        "defaultContent": '' }, 
                    {sClass: "alignRight", "data": "formattedInvoicePSTAmount",
                        "defaultContent": '' },                          
                    {sClass: "alignRight", "data": "formattedInvoiceTotal",
                        "defaultContent": '' },
                    //Hide the childData column. It is still searchable.
                    {"data": "childData",
                        "defaultContent": '', "visible": false },                               
                    ],
                order: [[1, 'asc']]
            } );    
 
        // This is used to watch for clicks to expand and collapse the rows.
            j$('#invoicetable tbody').on('click', 'td.details-control', function () {
                var tr = j$(this).closest('tr');
                var row = invoiceTable.row( tr );
         
                if ( row.child.isShown() ) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                }
                else {
                    // Open this row
                    formatInvoiceItems(row.data(), function(childData) {
                        row.child( childData ).show();
                        tr.addClass('shown');
                    });  
                }
            } );                                   
  
        
            // Each time an Invoice Header row is clicked to expand, we need to create a list of Invoice Charge Items for that Invoice Number and 
            // build a table to display the child rows.
            
            function formatInvoiceItems(d, callback) { 
    
                        var InvoicePaymentAmount = 0; 
                        var MerchandiseAmount = 0;
                                                
                        var InvoiceChargeItems = [];
                        var InvoiceLineItems = [];
                        var InvoiceCardItems = [];
                        var UniqueInvoiceLines = [];
                        var UniqueInvoiceCardItems = [];
                        var BillingDisplayDetailItems = [];
                        var AdditionalChargeItems = [];
                        var couponCounter = 0;
                        var InvoiceAndLineSequenceKey;
                        
                       console.log('CLICKED ON ROW: '+JSON.stringify(d));
                         
                        if(invoiceDetail.length != 0){                                   
                            for (i=0; i<invoiceDetail.length; i++){                                                               
                                if(invoiceDetail[i].InvoiceNumber == d.InvoiceNumber){ 
                                    InvoiceChargeItems.push(invoiceDetail[i]);                               
                                }                       
                            }
                            console.log('InvoiceChargeItems: '+JSON.stringify(InvoiceChargeItems));
                            var totalcharges = 0;
                            var totalcarditems = 0;
                            var totaladdcharge = 0;
                            for(n=0; n<InvoiceChargeItems.length; n++){
                            
                               for(var k=0; k<InvoiceChargeItems[n].additionalCharge.length; k++){
                               
                                  if (InvoiceChargeItems[n].additionalCharge[k].ChargeDescription != undefined) {
                                     AdditionalChargeItems[totaladdcharge] = {
                                    'Invoice_Type__c': InvoiceChargeItems[n].additionalCharge[k].ChargeCode,
                                    'prodDesc': 'ADD. CHG: ' + InvoiceChargeItems[n].additionalCharge[k].ChargeDescription,
                                    'Invoice_Line_Number__c': '---',
                                    'Payment_Category_Description__c': '---',
                                    'Payment_Type_Description__c': '---',
                                    'Credit_Card_Number__c': '---',
                                    'Quantity_Shipped__c': '---', 
                                    'Tax_Amount_IL__c': '---', 
                                    'GST_Amount_IL__c': '---',
                                    'PST_Amount_IL__c': '---', 
                                    'Merchandise_Unit_Price_IL__c': '---', 
                                    'Payment_Merchandise_Amount__c': '---',
                                    'Payment_Handling_Amount__c': '---',
                                    'Payment_Freight_Amount__c': '---',
                                    'Payment_Additional_Charge_Amount__c': '---',
                                    'Payment_Additional_Freight_Amount__c': '---',
                                    'Payment_Tax_Amount__c': '---',
                                    'Item_Number__c': '', 
                                    'Color_Code__c': '---', 
                                    'Size_Code__c': '',
                                    'MerchandiseAmount':'---',
                                    'InvoicePaymentAmount': '---',
                                    'PaymentTotal': '$' + InvoiceChargeItems[n].additionalCharge[k].ChargeAmount.toFixed(2)};
                                        
                                    totaladdcharge++;
                                  }                           
                               }
                              
                                for(var m=0; m<InvoiceChargeItems[n].invoiceLine.length; m++){                          
                            
                                // Don't display any item information on Order level refunds
                                                                
                                if (InvoiceChargeItems[n].invoiceLine[m].ItemNumber != undefined) {
                                    var skuProdDesc = '';
                                    if(InvoiceChargeItems[n].invoiceLine[m].skuProduct != undefined){
                                       if(InvoiceChargeItems[n].invoiceLine[m].skuProduct.ECommerce_Display_Name__c != undefined){
                                          skuProdDesc = InvoiceChargeItems[n].invoiceLine[m].skuProduct.ECommerce_Display_Name__c;                
                                       }else{
                                          skuProdDesc = InvoiceChargeItems[n].invoiceLine[m].skuProduct.CW_Item_Description__c; 
                                       }
                                    }                                
                                    InvoiceLineItems[totalcharges] = {
                                    'Invoice_Type__c': InvoiceChargeItems[n].InvoiceType, 
                                    'prodDesc': skuProdDesc,
                                    'Invoice_Line_Number__c': InvoiceChargeItems[n].invoiceLine[m].InvoiceLineNumber,
                                    'Payment_Category_Description__c': '-', 
                                    'Payment_Type_Description__c': '-', 
                                    'Credit_Card_Number__c': '---', 
                                    'Quantity_Shipped__c': InvoiceChargeItems[n].invoiceLine[m].QuantityShipped, 
                                    'Tax_Amount_IL__c':'$' + (InvoiceChargeItems[n].invoiceLine[m].TaxAmountIL).toFixed(2), 
                                    'GST_Amount_IL__c':'$' + (InvoiceChargeItems[n].invoiceLine[m].GSTAmountIL).toFixed(2),
                                    'PST_Amount_IL__c':'$' + (InvoiceChargeItems[n].invoiceLine[m].PSTAmountIL).toFixed(2), 
                                    'Merchandise_Unit_Price_IL__c':'$' + (InvoiceChargeItems[n].invoiceLine[m].MerchandiseUnitPriceIL).toFixed(2), 
                                    'Payment_Merchandise_Amount__c': '---', 
                                    'Payment_Handling_Amount__c': '---',
                                    'Payment_Freight_Amount__c': '---',
                                    'Payment_Additional_Charge_Amount__c': '---',
                                    'Payment_Additional_Freight_Amount__c':'---',
                                    'Payment_Tax_Amount__c': '---',
                                    'Item_Number__c': InvoiceChargeItems[n].invoiceLine[m].ItemNumber, 
                                    'Color_Code__c': InvoiceChargeItems[n].invoiceLine[m].ColorCode,
                                    'Size_Code__c': InvoiceChargeItems[n].invoiceLine[m].SizeCode,
                                    'MerchandiseAmount':'$' + (InvoiceChargeItems[n].invoiceLine[m].QuantityShipped * InvoiceChargeItems[n].invoiceLine[m].MerchandiseUnitPriceIL).toFixed(2),
                                    'InvoicePaymentAmount':'$' + ((InvoiceChargeItems[n].invoiceLine[m].QuantityShipped * InvoiceChargeItems[n].invoiceLine[m].MerchandiseUnitPriceIL) + (InvoiceChargeItems[n].invoiceLine[m].TaxAmountIL)).toFixed(2),
                                    'PaymentTotal': '---'};
                                    totalcharges++;
                                }
                                
                                if (InvoiceChargeItems[n].invoiceLine[m].CreditCardNumber == undefined | InvoiceChargeItems[n].invoiceLine[m].CreditCardNumber == '')
                                    InvoiceChargeItems[n].invoiceLine[m].CreditCardNumber = '---';
                                    
                                // Don't display any payment info associated with Accomodation Gift Cards
                                
                                if (InvoiceChargeItems[n]._props.prodSKUType != "Accommodation Gift Card"){
                                
                                    var pymtKey;
 
                                    if(InvoiceChargeItems[n].invoiceLine[m].PaymentCategoryDescription == 'Coupon/Credit'){                                 
                                       if(InvoiceAndLineSequenceKey == undefined | InvoiceAndLineSequenceKey == invoiceDetail[n].InvoiceNumber + ' - ' + InvoiceChargeItems[n].invoiceLine[m].InvoiceOrderLineSequenceNumber){
                                          pymtKey = InvoiceChargeItems[n].invoiceLine[m].PaymentCategoryDescription + couponCounter;
                                          InvoiceAndLineSequenceKey = invoiceDetail[n].InvoiceNumber + ' - ' + InvoiceChargeItems[n].invoiceLine[m].InvoiceOrderLineSequenceNumber;
                                          couponCounter++;                                            
                                       }
                                    }else{
                                       pymtKey = InvoiceChargeItems[n].invoiceLine[m].CreditCardNumber;
                                    }                                   
                                
                                    InvoiceCardItems[totalcarditems] = {
                                    'Invoice_Type__c': '---', 
                                    'prodDesc': 'PMT/REF: ' + InvoiceChargeItems[n].invoiceLine[m].PaymentTypeDescription, 
                                    'Invoice_Line_Number__c': InvoiceChargeItems[n].invoiceLine[m].InvoiceLineNumber,
                                    'Payment_Category_Description__c': InvoiceChargeItems[n].invoiceLine[m].PaymentCategoryDescription, 
                                    'Payment_Type_Description__c': InvoiceChargeItems[n].invoiceLine[m].PaymentTypeDescription, 
                                    'Credit_Card_Number__c': InvoiceChargeItems[n].invoiceLine[m].CreditCardNumber, 
                                    'PaymentKey': pymtKey, 
                                    'Quantity_Shipped__c': '---', 
                                    'Tax_Amount_IL__c': '---', 
                                    'GST_Amount_IL__c': '---',
                                    'PST_Amount_IL__c': '---', 
                                    'Merchandise_Unit_Price_IL__c': '---', 
                                    'Payment_Merchandise_Amount__c':'$' + (InvoiceChargeItems[n].invoiceLine[m].PaymentMerchandiseAmount).toFixed(2), 
                                    'Payment_Handling_Amount__c': '$' + (InvoiceChargeItems[n].invoiceLine[m].PaymentHandlingAmount).toFixed(2),
                                    'Payment_Freight_Amount__c': '$' + (InvoiceChargeItems[n].invoiceLine[m].PaymentFreightAmount).toFixed(2),
                                    'Payment_Additional_Charge_Amount__c': '$' + (InvoiceChargeItems[n].invoiceLine[m].PaymentAdditionalChargeAmount).toFixed(2),
                                    'Payment_Additional_Freight_Amount__c': '$' + (InvoiceChargeItems[n].invoiceLine[m].PaymentAdditionalFreightAmount).toFixed(2),
                                    'Payment_Tax_Amount__c': '$' + (InvoiceChargeItems[n].invoiceLine[m].PaymentTaxAmount).toFixed(2),
                                    'Item_Number__c': '', 
                                    'Color_Code__c': '---', 
                                    'Size_Code__c': '',
                                    'MerchandiseAmount':'---',
                                    'InvoicePaymentAmount': '---',
                                    'PaymentTotal': '$' + ((InvoiceChargeItems[n].invoiceLine[m].PaymentMerchandiseAmount) + (InvoiceChargeItems[n].invoiceLine[m].PaymentHandlingAmount) + (InvoiceChargeItems[n].invoiceLine[m].PaymentFreightAmount) + (InvoiceChargeItems[n].invoiceLine[m].PaymentAdditionalChargeAmount) + (InvoiceChargeItems[n].invoiceLine[m].PaymentAdditionalFreightAmount) + (InvoiceChargeItems[n].invoiceLine[m].PaymentTaxAmount)).toFixed(2)};                                  
                                    }
                                    totalcarditems++;
                                }                               
                            }
                        }                                         
                        UniqueInvoiceLines = _.uniq(InvoiceLineItems, 'Invoice_Line_Number__c');
                        UniqueInvoiceCardItems = _.uniq(InvoiceCardItems, 'PaymentKey');
                        BillingDisplayDetailItems = UniqueInvoiceCardItems.concat(AdditionalChargeItems).concat(UniqueInvoiceLines);
                                                
                        var table = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">'+
                                    '<thead><tr><th>Type</th><th>Description</th><th>Credit Card #<br>(PMT/REF)</th><th>Merch.<br>(PMT/REF)</th><th>Handling<br>(PMT/REF)</th><th>Freight<br>(PMT/REF)</th><th>Add. Handling<br>(PMT/REF)</th><th>Add. Charge<br>(PMT/REF)</th><th>Tax<br>(PMT/REF)</th><th>Total<br>(PMT/REF/ADD. CHG)</th><th>Quantity</th><th>Price</th><th>Merch. Total</th><th>Tax</th><th>GST</th><th>PST</th><th>Total</th></tr></thead><tbody>';
                                                
                        BillingDisplayDetailItems.forEach(function (record){
                                                                                                                            
                            table = table + '<tr><td>' + record.Invoice_Type__c + '</td><td>' + record.prodDesc + '</td><td>' + record.Credit_Card_Number__c + '</td><td class style="text-align: right;">' + record.Payment_Merchandise_Amount__c + '</td><td class style="text-align: right;">' 
                            + record.Payment_Handling_Amount__c + '</td><td class style="text-align: right;">' + record.Payment_Freight_Amount__c + '</td><td class style="text-align: right;">'
                            + record.Payment_Additional_Freight_Amount__c + '</td><td class style="text-align: right;">' + record.Payment_Additional_Charge_Amount__c + '</td><td class style="text-align: right;">' + record.Payment_Tax_Amount__c + '</td><td class style="text-align: right;">' + record.PaymentTotal + '</td><td class style="text-align: right;">' + record.Quantity_Shipped__c + '</td><td class style="text-align: right;">' + record.Merchandise_Unit_Price_IL__c + '</td><td class style="text-align: right;">' 
                            + record.MerchandiseAmount + '</td><td class style="text-align: right;">' + record.Tax_Amount_IL__c + '</td><td class style="text-align: right;">' + record.GST_Amount_IL__c + '</td><td class style="text-align: right;">' 
                            + record.PST_Amount_IL__c  + '</td><td class style="text-align: right;">' + record.InvoicePaymentAmount + '</td></tr>';
                            
                        });
                        
                        table = table + '</tbody></table>';
                        callback(table); 
                     }       
                     loadingDetails(false);
            }  
             
    </script>
    </head>
    <body>
   
  <div id="errorMessage"/>  
  <div id="loadingbillingdata">
   <div style="text-align:center;">
    <apex:image style="width:100px;height:100px;" id="theLoadingImage" value="{!URLFOR($Resource.waitingIconicWheel)}" />
    <br/>
    <apex:outputText style="font-size:18px; color:#0E83DD" value="Querying Billing Details..."/>
   </div>
  </div>
  
    <table id="invoicetable" class="display" cellspacing="0" width="100%">
    <caption title=""><strong>ORDER NUMBER: {!RH_Order__c.Name}</strong></caption>      
        <thead>
            <tr>
                <th/> 
                <th>Invoice Date</th>
                <th>Invoice #</th>
                <th>Merch. Total</th>
                <th>Handling</th>
                <th>Freight</th>
                <th>Add. Charge</th>
                <th>Add. Freight</th>
                <th>Tax</th>
                <th>GST</th>
                <th>PST</th>
                <th>Invoice Total</th>
                </tr>
        </thead>
     </table>
              
     </body>
</apex:page>